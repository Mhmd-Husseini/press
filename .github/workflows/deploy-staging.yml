name: Deploy to EC2 Staging

on:
  push:
    branches: [ staging ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Stop PM2 process first
          pm2 stop phoenix-press || true
          pm2 delete phoenix-press || true
          
          # Create directory if it doesn't exist
          sudo mkdir -p /var/www/phoenix-press
          sudo chown ubuntu:ubuntu /var/www/phoenix-press
          
          cd /var/www/phoenix-press
          
          # Completely remove the directory contents and clone fresh
          echo "🧹 Cleaning directory and cloning fresh repository..."
          sudo rm -rf /var/www/phoenix-press/*
          sudo rm -rf /var/www/phoenix-press/.* 2>/dev/null || true
          git clone https://github.com/Mhmd-Husseini/press.git .
          
          # Fetch latest changes and reset to staging branch
          git fetch origin
          git checkout staging
          git reset --hard origin/staging
          
          # Install dependencies (no cd press needed - it's flat structure)
          pnpm install --frozen-lockfile
          
          # Create .env.production from secrets
          cat > .env.production << 'EOF'
          # Database Configuration
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          
          # Authentication
          JWT_ACCESS_SECRET="${{ secrets.JWT_ACCESS_SECRET }}"
          NEXTAUTH_URL="http://${{ secrets.EC2_HOST }}"
          NEXTAUTH_SECRET="your-super-secure-nextauth-secret-key-2024-phoenix-press"
          
          # AWS S3 Configuration
          # AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          # AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          AWS_DEFAULT_REGION="eu-north-1"
          AWS_BUCKET="inventory-managment-husseini"
          AWS_URL="https://inventory-managment-husseini.s3.eu-north-1.amazonaws.com"
          
          # Public S3 URL
          NEXT_PUBLIC_S3_URL="https://inventory-managment-husseini.s3.eu-north-1.amazonaws.com"
          
          # Application Configuration
          NODE_ENV="production"
          NEXT_TELEMETRY_DISABLED=1
          
          # Application URL
          NEXT_PUBLIC_APP_URL="http://${{ secrets.EC2_HOST }}"
          EOF
          
          cp .env.production .env
                      pnpm prisma generate
            pnpm prisma migrate deploy
            
            # Build and deploy application
            echo "🚀 Building and deploying application..."
            pnpm build
            
            # Copy static files for standalone mode
            echo "📁 Copying static files for standalone mode..."
            cp -r .next/static .next/standalone/.next/
            cp -r public .next/standalone/
            
            # Start application
            pm2 start ecosystem.config.js
            sudo systemctl reload nginx

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /var/www/phoenix-press
          if [ -f "scripts/health-check.sh" ]; then
            chmod +x scripts/health-check.sh
            ./scripts/health-check.sh
          else
            echo "Health check script not found, checking application status..."
            pm2 status phoenix-press
            curl -I http://localhost:3000 || echo "Application not responding"
          fi

    - name: Notify on Success
      if: success()
      run: |
        echo "🎉 Deployment successful!"
        echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"

    - name: Notify on Failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "Please check the logs and try again." 