"use strict";(()=>{var e={};e.id=4133,e.ids=[4133],e.modules={96330:e=>{e.exports=require("@prisma/client")},10846:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},29294:e=>{e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},55511:e=>{e.exports=require("crypto")},4573:e=>{e.exports=require("node:buffer")},77598:e=>{e.exports=require("node:crypto")},57975:e=>{e.exports=require("node:util")},22683:(e,r,s)=>{s.r(r),s.d(r,{patchFetch:()=>y,routeModule:()=>x,serverHooks:()=>h,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>g});var o={};s.r(o),s.d(o,{GET:()=>d,POST:()=>m});var t=s(42706),n=s(28203),i=s(45994),a=s(39187),l=s(49402),u=s(60399);let p=new l.W,c=new u.u;async function d(e){try{let r=await c.getCurrentUser();console.log("Current user from authService (roles):",r?{id:r.id,email:r.email,roles:r.roles.map(e=>e.role.name)}:null);let s=e.cookies.get("auth-token")?.value;if(console.log("Token found in cookies:",!!s),s)try{let e=await c.verifyToken(s);if(console.log("JWT token payload (roles):",e),e){let r=e.roles||[];if(Array.isArray(r)&&(r.includes("ADMIN")||r.includes("SUPER_ADMIN"))){console.log("User has admin role in token, bypassing permission check");let e=await p.getAll();return a.NextResponse.json(e)}}else console.log("Token verification failed - decoded payload is null")}catch(e){console.error("Error decoding token:",e)}else console.log("No auth token found in cookies");let o=await c.hasPermission("view_roles");if(console.log("Has view_roles permission:",o),!o)return a.NextResponse.json({error:"Unauthorized: Insufficient permissions"},{status:403});let t=await p.getAll();return a.NextResponse.json(t)}catch(e){return console.error("Error fetching roles:",e),a.NextResponse.json({error:"Failed to fetch roles"},{status:500})}}async function m(e){try{if(!await c.hasPermission("create_roles"))return a.NextResponse.json({error:"Unauthorized: Insufficient permissions"},{status:403});let r=await e.json();if(!r.name)return a.NextResponse.json({error:"Role name is required"},{status:400});let s=Array.isArray(r.permissions)?r.permissions:[],o=await p.create({name:r.name,nameArabic:r.nameArabic,description:r.description,descriptionArabic:r.descriptionArabic},s);return a.NextResponse.json(o,{status:201})}catch(e){if(console.error("Error creating role:",e),e instanceof Error&&e.message.includes("already exists"))return a.NextResponse.json({error:e.message},{status:409});return a.NextResponse.json({error:"Failed to create role"},{status:500})}}let x=new t.AppRouteRouteModule({definition:{kind:n.RouteKind.APP_ROUTE,page:"/api/admin/roles/route",pathname:"/api/admin/roles",filename:"route",bundlePath:"app/api/admin/roles/route"},resolvedPagePath:"D:\\press\\src\\app\\api\\admin\\roles\\route.ts",nextConfigOutput:"standalone",userland:o}),{workAsyncStorage:f,workUnitAsyncStorage:g,serverHooks:h}=x;function y(){return(0,i.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:g})}}};var r=require("../../../../webpack-runtime.js");r.C(e);var s=e=>r(r.s=e),o=r.X(0,[638,5452,4512,4926,7031,5371],()=>s(22683));module.exports=o})();